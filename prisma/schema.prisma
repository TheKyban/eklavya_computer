datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // personal
    name    String
    email   String? @unique
    img     String
    phone   String
    address Address

    // branch
    userId   String    @unique
    password String
    role     role      @default(FRANCHISE)
    isActive Boolean   @default(true)
    branch   String
    Students Student[]

    // dates
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Student {
    // personal
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    img           String
    fatherName    String
    motherName    String
    gender        gender
    qualification String?
    dob           DateTime
    phone         String
    email         String?
    address       Address

    // branch 
    registration       String    @unique
    branch             String
    course             String    @db.ObjectId
    marks              Marks?
    serialNumber       Int?
    courseCompleteDate DateTime?

    // verification
    isVerified  Boolean @default(false)
    icard       Issue
    marksheet   Issue
    certificate Issue

    // dates
    dor       DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // relations
    Branch User   @relation(fields: [branch], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    Course Course @relation(fields: [course], references: [id])
}

model Marks {
    id                        String       @id @default(auto()) @map("_id") @db.ObjectId
    studentRegistrationNumber String       @unique
    Student                   Student      @relation(fields: [studentRegistrationNumber], references: [registration], onDelete: Cascade, onUpdate: Cascade)
    marks                     GenralMarks?
    typingMarks               TypingMarks?
    createdAt                 DateTime     @default(now())
    updatedAt                 DateTime     @updatedAt
}

model Course {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    name                String               @unique
    fullName            String
    duration            String
    modules             String?
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    StudentApplications StudentApplication[]
    Students            Student[]
}

model StudentSerialNumber {
    id           String @id @default(auto()) @map("_id") @db.ObjectId
    serialNumber Int
}

model UserApplication {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String?  @unique
    img       String
    phone     String
    address   Address
    branch    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudentApplication {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    img           String
    fatherName    String
    motherName    String
    gender        gender
    qualification String?
    dob           DateTime
    phone         String
    email         String?
    dor           DateTime
    course        String   @db.ObjectId
    Course        Course   @relation(fields: [course], references: [id])
    address       Address
    branch        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

type Address {
    state    String
    district String
    pincode  String
    street   String
}

type GenralMarks {
    written   Int
    practical Int
    project   Int
    viva      Int
}

type TypingMarks {
    englishTyping Int
    hindiTyping   Int
}

enum gender {
    MALE
    FEMALE
    TRANSGENDER
}

enum role {
    ADMIN
    FRANCHISE
}

model Carousel {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    url       String
    createdAt DateTime @default(now())
}

model UniversityPrograms {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    url       String
    createdAt DateTime @default(now())
}

type Issue {
    issue Boolean   @default(false)
    date  DateTime?
}
